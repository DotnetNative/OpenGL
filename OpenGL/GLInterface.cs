using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection.Emit;
using System.Text;
using System.Threading.Tasks;

namespace OpenGL;
public unsafe struct GLInterface
{
    public GLInterface()
    {
        Base = Interop.GetModuleHandle("opengl32");
        glAccum = (delegate* unmanaged<Enums.Op, float, void>)Interop.GetProcAddress(Base, "glAccum").ToPointer();
        glAlphaFunc = (delegate* unmanaged<Enums.Func, float, void>)Interop.GetProcAddress(Base, "glAlphaFunc").ToPointer();
        glAreTexturesResident = (delegate* unmanaged<int, uint*, byte*, byte>)Interop.GetProcAddress(Base, "glAreTexturesResident").ToPointer();
        glArrayElement = (delegate* unmanaged<int, void>)Interop.GetProcAddress(Base, "glArrayElement").ToPointer();
        glBegin = (delegate* unmanaged<Enums.Mode, void>)Interop.GetProcAddress(Base, "glBegin").ToPointer();
        glBindTexture = (delegate* unmanaged<Enums.TexPTarget, uint, void>)Interop.GetProcAddress(Base, "glBindTexture").ToPointer();
        glBitmap = (delegate* unmanaged<int, int, float, float, float, float, byte*, void>)Interop.GetProcAddress(Base, "glBitmap").ToPointer();
        glBlendFunc = (delegate* unmanaged<Enums.Factor, Enums.Factor, void>)Interop.GetProcAddress(Base, "glBlendFunc").ToPointer();
        glCallList = (delegate* unmanaged<uint, void>)Interop.GetProcAddress(Base, "glCallList").ToPointer();
        glCallLists = (delegate* unmanaged<int, Enums.Type, void*, void>)Interop.GetProcAddress(Base, "glCallLists").ToPointer();
        glClear = (delegate* unmanaged<uint, void>)Interop.GetProcAddress(Base, "glClear").ToPointer();
        glClearAccum = (delegate* unmanaged<float, float, float, float, void>)Interop.GetProcAddress(Base, "glClearAccum").ToPointer();
        glClearColor = (delegate* unmanaged<float, float, float, float, void>)Interop.GetProcAddress(Base, "glClearColor").ToPointer();
        glClearDepth = (delegate* unmanaged<double, void>)Interop.GetProcAddress(Base, "glClearDepth").ToPointer();
        glClearIndex = (delegate* unmanaged<float, void>)Interop.GetProcAddress(Base, "glClearIndex").ToPointer();
        glClearStencil = (delegate* unmanaged<int, void>)Interop.GetProcAddress(Base, "glClearStencil").ToPointer();
        glClipPlane = (delegate* unmanaged<Enums.Plane, double*, void>)Interop.GetProcAddress(Base, "glClipPlane").ToPointer();
        glColor3b = (delegate* unmanaged<sbyte, sbyte, sbyte, void>)Interop.GetProcAddress(Base, "glColor3b").ToPointer();
        glColor3bv = (delegate* unmanaged<sbyte*, void>)Interop.GetProcAddress(Base, "glColor3bv").ToPointer();
        glColor3d = (delegate* unmanaged<double, double, double, void>)Interop.GetProcAddress(Base, "glColor3d").ToPointer();
        glColor3dv = (delegate* unmanaged<double*, void>)Interop.GetProcAddress(Base, "glColor3dv").ToPointer();
        glColor3f = (delegate* unmanaged<float, float, float, void>)Interop.GetProcAddress(Base, "glColor3f").ToPointer();
        glColor3fv = (delegate* unmanaged<float*, void>)Interop.GetProcAddress(Base, "glColor3fv").ToPointer();
        glColor3i = (delegate* unmanaged<int, int, int, void>)Interop.GetProcAddress(Base, "glColor3i").ToPointer();
        glColor3iv = (delegate* unmanaged<int*, void>)Interop.GetProcAddress(Base, "glColor3iv").ToPointer();
        glColor3s = (delegate* unmanaged<short, short, short, void>)Interop.GetProcAddress(Base, "glColor3s").ToPointer();
        glColor3sv = (delegate* unmanaged<short*, void>)Interop.GetProcAddress(Base, "glColor3sv").ToPointer();
        glColor3ub = (delegate* unmanaged<byte, byte, byte, void>)Interop.GetProcAddress(Base, "glColor3ub").ToPointer();
        glColor3ubv = (delegate* unmanaged<byte*, void>)Interop.GetProcAddress(Base, "glColor3ubv").ToPointer();
        glColor3ui = (delegate* unmanaged<uint, uint, uint, void>)Interop.GetProcAddress(Base, "glColor3ui").ToPointer();
        glColor3uiv = (delegate* unmanaged<uint*, void>)Interop.GetProcAddress(Base, "glColor3uiv").ToPointer();
        glColor3us = (delegate* unmanaged<ushort, ushort, ushort, void>)Interop.GetProcAddress(Base, "glColor3us").ToPointer();
        glColor3usv = (delegate* unmanaged<ushort*, void>)Interop.GetProcAddress(Base, "glColor3usv").ToPointer();
        glColor4b = (delegate* unmanaged<sbyte, sbyte, sbyte, sbyte, void>)Interop.GetProcAddress(Base, "glColor4b").ToPointer();
        glColor4bv = (delegate* unmanaged<sbyte*, void>)Interop.GetProcAddress(Base, "glColor4bv").ToPointer();
        glColor4d = (delegate* unmanaged<double, double, double, double, void>)Interop.GetProcAddress(Base, "glColor4d").ToPointer();
        glColor4dv = (delegate* unmanaged<double*, void>)Interop.GetProcAddress(Base, "glColor4dv").ToPointer();
        glColor4f = (delegate* unmanaged<float, float, float, float, void>)Interop.GetProcAddress(Base, "glColor4f").ToPointer();
        glColor4fv = (delegate* unmanaged<float*, void>)Interop.GetProcAddress(Base, "glColor4fv").ToPointer();
        glColor4i = (delegate* unmanaged<int, int, int, int, void>)Interop.GetProcAddress(Base, "glColor4i").ToPointer();
        glColor4iv = (delegate* unmanaged<int*, void>)Interop.GetProcAddress(Base, "glColor4iv").ToPointer();
        glColor4s = (delegate* unmanaged<short, short, short, short, void>)Interop.GetProcAddress(Base, "glColor4s").ToPointer();
        glColor4sv = (delegate* unmanaged<short*, void>)Interop.GetProcAddress(Base, "glColor4sv").ToPointer();
        glColor4ub = (delegate* unmanaged<byte, byte, byte, byte, void>)Interop.GetProcAddress(Base, "glColor4ub").ToPointer();
        glColor4ubv = (delegate* unmanaged<byte*, void>)Interop.GetProcAddress(Base, "glColor4ubv").ToPointer();
        glColor4ui = (delegate* unmanaged<uint, uint, uint, uint, void>)Interop.GetProcAddress(Base, "glColor4ui").ToPointer();
        glColor4uiv = (delegate* unmanaged<uint*, void>)Interop.GetProcAddress(Base, "glColor4uiv").ToPointer();
        glColor4us = (delegate* unmanaged<ushort, ushort, ushort, ushort, void>)Interop.GetProcAddress(Base, "glColor4us").ToPointer();
        glColor4usv = (delegate* unmanaged<ushort*, void>)Interop.GetProcAddress(Base, "glColor4usv").ToPointer();
        glColorMask = (delegate* unmanaged<byte, byte, byte, byte, void>)Interop.GetProcAddress(Base, "glColorMask").ToPointer();
        glColorMaterial = (delegate* unmanaged<Enums.Face, Enums.MaterialParam, void>)Interop.GetProcAddress(Base, "glColorMaterial").ToPointer();
        glColorPointer = (delegate* unmanaged<int, Enums.BType, int, void*, void>)Interop.GetProcAddress(Base, "glColorPointer").ToPointer();
        glCopyPixels = (delegate* unmanaged<int, int, int, int, Enums.CopyType, void>)Interop.GetProcAddress(Base, "glCopyPixels").ToPointer();
        glCopyTexImage1D = (delegate* unmanaged<Enums.TexPTarget, int, Enums.InternalFormat, int, int, int, int, void>)Interop.GetProcAddress(Base, "glCopyTexImage1D").ToPointer();
        glCopyTexImage2D = (delegate* unmanaged<Enums.TexPTarget, int, Enums.InternalFormat, int, int, int, int, int, void>)Interop.GetProcAddress(Base, "glCopyTexImage2D").ToPointer();
        glCopyTexSubImage1D = (delegate* unmanaged<Enums.TexPTarget, int, int, int, int, int, void>)Interop.GetProcAddress(Base, "glCopyTexSubImage1D").ToPointer();
        glCopyTexSubImage2D = (delegate* unmanaged<Enums.TexPTarget, int, int, int, int, int, int, int, void>)Interop.GetProcAddress(Base, "glCopyTexSubImage2D").ToPointer();
        glCullFace = (delegate* unmanaged<Enums.Face, void>)Interop.GetProcAddress(Base, "glCullFace").ToPointer();
        glDeleteLists = (delegate* unmanaged<uint, int, void>)Interop.GetProcAddress(Base, "glDeleteLists").ToPointer();
        glDeleteTextures = (delegate* unmanaged<int, uint*, void>)Interop.GetProcAddress(Base, "glDeleteTextures").ToPointer();
        glDepthFunc = (delegate* unmanaged<Enums.Func, void>)Interop.GetProcAddress(Base, "glDepthFunc").ToPointer();
        glDepthMask = (delegate* unmanaged<byte, void>)Interop.GetProcAddress(Base, "glDepthMask").ToPointer();
        glDepthRange = (delegate* unmanaged<double, double, void>)Interop.GetProcAddress(Base, "glDepthRange").ToPointer();
        glDisable = (delegate* unmanaged<Enums.Cap, void>)Interop.GetProcAddress(Base, "glDisable").ToPointer();
        glDisableClientState = (delegate* unmanaged<Enums.ArrayState, void>)Interop.GetProcAddress(Base, "glDisableClientState").ToPointer();
        glDrawArrays = (delegate* unmanaged<Enums.Mode, int, int, void>)Interop.GetProcAddress(Base, "glDrawArrays").ToPointer();
        glDrawBuffer = (delegate* unmanaged<Enums.Mode, void>)Interop.GetProcAddress(Base, "glDrawBuffer").ToPointer();
        glDrawElements = (delegate* unmanaged<Enums.Mode, int, Enums.BUType, void*, void>)Interop.GetProcAddress(Base, "glDrawElements").ToPointer();
        glDrawPixels = (delegate* unmanaged<int, int, Enums.ImageFormat, Enums.BType, void*, void>)Interop.GetProcAddress(Base, "glDrawPixels").ToPointer();
        glEdgeFlag = (delegate* unmanaged<byte, void>)Interop.GetProcAddress(Base, "glEdgeFlag").ToPointer();
        glEdgeFlagPointer = (delegate* unmanaged<int, void*, void>)Interop.GetProcAddress(Base, "glEdgeFlagPointer").ToPointer();
        glEdgeFlagv = (delegate* unmanaged<byte*, void>)Interop.GetProcAddress(Base, "glEdgeFlagv").ToPointer();
        glEnable = (delegate* unmanaged<Enums.Cap, void>)Interop.GetProcAddress(Base, "glEnable").ToPointer();
        glEnableClientState = (delegate* unmanaged<Enums.ArrayState, void>)Interop.GetProcAddress(Base, "glEnableClientState").ToPointer();
        glEnd = (delegate* unmanaged<void>)Interop.GetProcAddress(Base, "glEnd").ToPointer();
        glEndList = (delegate* unmanaged<void>)Interop.GetProcAddress(Base, "glEndList").ToPointer();
        glEvalCoord1d = (delegate* unmanaged<double, void>)Interop.GetProcAddress(Base, "glEvalCoord1d").ToPointer();
        glEvalCoord1dv = (delegate* unmanaged<double*, void>)Interop.GetProcAddress(Base, "glEvalCoord1dv").ToPointer();
        glEvalCoord1f = (delegate* unmanaged<float, void>)Interop.GetProcAddress(Base, "glEvalCoord1f").ToPointer();
        glEvalCoord1fv = (delegate* unmanaged<float*, void>)Interop.GetProcAddress(Base, "glEvalCoord1fv").ToPointer();
        glEvalCoord2d = (delegate* unmanaged<double, double, void>)Interop.GetProcAddress(Base, "glEvalCoord2d").ToPointer();
        glEvalCoord2dv = (delegate* unmanaged<double*, void>)Interop.GetProcAddress(Base, "glEvalCoord2dv").ToPointer();
        glEvalCoord2f = (delegate* unmanaged<float, float, void>)Interop.GetProcAddress(Base, "glEvalCoord2f").ToPointer();
        glEvalCoord2fv = (delegate* unmanaged<float*, void>)Interop.GetProcAddress(Base, "glEvalCoord2fv").ToPointer();
        glEvalMesh1 = (delegate* unmanaged<Enums.EMesh, int, int, void>)Interop.GetProcAddress(Base, "glEvalMesh1").ToPointer();
        glEvalMesh2 = (delegate* unmanaged<Enums.Mesh, int, int, int, int, void>)Interop.GetProcAddress(Base, "glEvalMesh2").ToPointer();
        glEvalPoint1 = (delegate* unmanaged<int, void>)Interop.GetProcAddress(Base, "glEvalPoint1").ToPointer();
        glEvalPoint2 = (delegate* unmanaged<int, int, void>)Interop.GetProcAddress(Base, "glEvalPoint2").ToPointer();
        glFeedbackBuffer = (delegate* unmanaged<int, Enums.Vertex, float*, void>)Interop.GetProcAddress(Base, "glFeedbackBuffer").ToPointer();
        glFinish = (delegate* unmanaged<void>)Interop.GetProcAddress(Base, "glFinish").ToPointer();
        glFlush = (delegate* unmanaged<void>)Interop.GetProcAddress(Base, "glFlush").ToPointer();
        glFogf = (delegate* unmanaged<Enums.Fog, float, void>)Interop.GetProcAddress(Base, "glFogf").ToPointer();
        glFogfv = (delegate* unmanaged<Enums.Fog, float*, void>)Interop.GetProcAddress(Base, "glFogfv").ToPointer();
        glFogi = (delegate* unmanaged<Enums.Fog, int, void>)Interop.GetProcAddress(Base, "glFogi").ToPointer();
        glFogiv = (delegate* unmanaged<Enums.Fog, int*, void>)Interop.GetProcAddress(Base, "glFogiv").ToPointer();
        glFrontFace = (delegate* unmanaged<Enums.FaceMode, void>)Interop.GetProcAddress(Base, "glFrontFace").ToPointer();
        glFrustum = (delegate* unmanaged<double, double, double, double, double, double, void>)Interop.GetProcAddress(Base, "glFrustum").ToPointer();
        glGenLists = (delegate* unmanaged<int, uint>)Interop.GetProcAddress(Base, "glGenLists").ToPointer();
        glGenTextures = (delegate* unmanaged<int, uint*, void>)Interop.GetProcAddress(Base, "glGenTextures").ToPointer();
        glGetBooleanv = (delegate* unmanaged<Enums.PName, byte*, void>)Interop.GetProcAddress(Base, "glGetBooleanv").ToPointer();
        glGetClipPlane = (delegate* unmanaged<Enums.Plane, double*, void>)Interop.GetProcAddress(Base, "glGetClipPlane").ToPointer();
        glGetDoublev = (delegate* unmanaged<Enums.PName, double*, void>)Interop.GetProcAddress(Base, "glGetDoublev").ToPointer();
        glGetError = (delegate* unmanaged<Enums.Error>)Interop.GetProcAddress(Base, "glGetError").ToPointer();
        glGetFloatv = (delegate* unmanaged<Enums.PName, float*, void>)Interop.GetProcAddress(Base, "glGetFloatv").ToPointer();
        glGetIntegerv = (delegate* unmanaged<Enums.PName, int*, void>)Interop.GetProcAddress(Base, "glGetIntegerv").ToPointer();
        glGetLightfv = (delegate* unmanaged<Enums.Light, Enums.LightN, float*, void>)Interop.GetProcAddress(Base, "glGetLightfv").ToPointer();
        glGetLightiv = (delegate* unmanaged<Enums.Light, Enums.LightN, int*, void>)Interop.GetProcAddress(Base, "glGetLightiv").ToPointer();
        glGetMapdv = (delegate* unmanaged<Enums.MapTarget, Enums.Query, double*, void>)Interop.GetProcAddress(Base, "glGetMapdv").ToPointer();
        glGetMapfv = (delegate* unmanaged<Enums.MapTarget, Enums.Query, float*, void>)Interop.GetProcAddress(Base, "glGetMapfv").ToPointer();
        glGetMapiv = (delegate* unmanaged<Enums.MapTarget, Enums.Query, int*, void>)Interop.GetProcAddress(Base, "glGetMapiv").ToPointer();
        glGetMaterialfv = (delegate* unmanaged<Enums.Side, Enums.MaterialParam, float*, void>)Interop.GetProcAddress(Base, "glGetMaterialfv").ToPointer();
        glGetMaterialiv = (delegate* unmanaged<Enums.Side, Enums.MaterialParam, int*, void>)Interop.GetProcAddress(Base, "glGetMaterialiv").ToPointer();
        glGetPixelMapfv = (delegate* unmanaged<Enums.Map, float*, void>)Interop.GetProcAddress(Base, "glGetPixelMapfv").ToPointer();
        glGetPixelMapuiv = (delegate* unmanaged<Enums.Map, uint*, void>)Interop.GetProcAddress(Base, "glGetPixelMapuiv").ToPointer();
        glGetPixelMapusv = (delegate* unmanaged<Enums.Map, ushort*, void>)Interop.GetProcAddress(Base, "glGetPixelMapusv").ToPointer();
        glGetPointerv = (delegate* unmanaged<Enums.PNamePtr, void**, void>)Interop.GetProcAddress(Base, "glGetPointerv").ToPointer();
        glGetPolygonStipple = (delegate* unmanaged<byte*, void>)Interop.GetProcAddress(Base, "glGetPolygonStipple").ToPointer();
        glGetString = (delegate* unmanaged<Enums.StringName, byte*>)Interop.GetProcAddress(Base, "glGetString").ToPointer();
        glGetTexEnvfv = (delegate* unmanaged<int, Enums.TexEnvN, float*, void>)Interop.GetProcAddress(Base, "glGetTexEnvfv").ToPointer();
        glGetTexEnviv = (delegate* unmanaged<int, Enums.TexEnvN, int*, void>)Interop.GetProcAddress(Base, "glGetTexEnviv").ToPointer();
        glGetTexGendv = (delegate* unmanaged<Enums.Coords, Enums.TexGenN, double*, void>)Interop.GetProcAddress(Base, "glGetTexGendv").ToPointer();
        glGetTexGenfv = (delegate* unmanaged<Enums.Coords, Enums.TexGenN, float*, void>)Interop.GetProcAddress(Base, "glGetTexGenfv").ToPointer();
        glGetTexGeniv = (delegate* unmanaged<Enums.Coords, Enums.TexGenN, int*, void>)Interop.GetProcAddress(Base, "glGetTexGeniv").ToPointer();
        glGetTexImage = (delegate* unmanaged<Enums.TexTarget, int, Enums.Image, Enums.BType, void*, void>)Interop.GetProcAddress(Base, "glGetTexImage").ToPointer();
        glGetTexLevelParameterfv = (delegate* unmanaged<Enums.TexPTarget, int, Enums.TexN, float*, void>)Interop.GetProcAddress(Base, "glGetTexLevelParameterfv").ToPointer();
        glGetTexLevelParameteriv = (delegate* unmanaged<Enums.TexPTarget, int, Enums.TexN, int*, void>)Interop.GetProcAddress(Base, "glGetTexLevelParameteriv").ToPointer();
        glGetTexParameterfv = (delegate* unmanaged<Enums.TexTarget, Enums.TexNV, float*, void>)Interop.GetProcAddress(Base, "glGetTexParameterfv").ToPointer();
        glGetTexParameteriv = (delegate* unmanaged<Enums.TexTarget, Enums.TexNV, int*, void>)Interop.GetProcAddress(Base, "glGetTexParameteriv").ToPointer();
        glHint = (delegate* unmanaged<Enums.Hint, Enums.Calc, void>)Interop.GetProcAddress(Base, "glHint").ToPointer();
        glIndexMask = (delegate* unmanaged<uint, void>)Interop.GetProcAddress(Base, "glIndexMask").ToPointer();
        glIndexPointer = (delegate* unmanaged<Enums.TexType, int, void*, void>)Interop.GetProcAddress(Base, "glIndexPointer").ToPointer();
        glIndexd = (delegate* unmanaged<double, void>)Interop.GetProcAddress(Base, "glIndexd").ToPointer();
        glIndexdv = (delegate* unmanaged<double*, void>)Interop.GetProcAddress(Base, "glIndexdv").ToPointer();
        glIndexf = (delegate* unmanaged<float, void>)Interop.GetProcAddress(Base, "glIndexf").ToPointer();
        glIndexfv = (delegate* unmanaged<float*, void>)Interop.GetProcAddress(Base, "glIndexfv").ToPointer();
        glIndexi = (delegate* unmanaged<int, void>)Interop.GetProcAddress(Base, "glIndexi").ToPointer();
        glIndexiv = (delegate* unmanaged<int*, void>)Interop.GetProcAddress(Base, "glIndexiv").ToPointer();
        glIndexs = (delegate* unmanaged<short, void>)Interop.GetProcAddress(Base, "glIndexs").ToPointer();
        glIndexsv = (delegate* unmanaged<short*, void>)Interop.GetProcAddress(Base, "glIndexsv").ToPointer();
        glIndexub = (delegate* unmanaged<byte, void>)Interop.GetProcAddress(Base, "glIndexub").ToPointer();
        glIndexubv = (delegate* unmanaged<byte*, void>)Interop.GetProcAddress(Base, "glIndexubv").ToPointer();
        glInitNames = (delegate* unmanaged<void>)Interop.GetProcAddress(Base, "glInitNames").ToPointer();
        glInterleavedArrays = (delegate* unmanaged<Enums.ArrayFormat, int, void*, void>)Interop.GetProcAddress(Base, "glInterleavedArrays").ToPointer();
        glIsEnabled = (delegate* unmanaged<Enums.Cap, byte>)Interop.GetProcAddress(Base, "glIsEnabled").ToPointer();
        glIsList = (delegate* unmanaged<uint, byte>)Interop.GetProcAddress(Base, "glIsList").ToPointer();
        glIsTexture = (delegate* unmanaged<uint, byte>)Interop.GetProcAddress(Base, "glIsTexture").ToPointer();
        glLightModelf = (delegate* unmanaged<Enums.LightModel, float, void>)Interop.GetProcAddress(Base, "glLightModelf").ToPointer();
        glLightModelfv = (delegate* unmanaged<Enums.LightModel, float*, void>)Interop.GetProcAddress(Base, "glLightModelfv").ToPointer();
        glLightModeli = (delegate* unmanaged<Enums.LightModel, int, void>)Interop.GetProcAddress(Base, "glLightModeli").ToPointer();
        glLightModeliv = (delegate* unmanaged<Enums.LightModel, int*, void>)Interop.GetProcAddress(Base, "glLightModeliv").ToPointer();
        glLightf = (delegate* unmanaged<Enums.Light, Enums.LightN, float, void>)Interop.GetProcAddress(Base, "glLightf").ToPointer();
        glLightfv = (delegate* unmanaged<Enums.Light, Enums.LightN, float*, void>)Interop.GetProcAddress(Base, "glLightfv").ToPointer();
        glLighti = (delegate* unmanaged<Enums.Light, Enums.LightN, int, void>)Interop.GetProcAddress(Base, "glLighti").ToPointer();
        glLightiv = (delegate* unmanaged<Enums.Light, Enums.LightN, int*, void>)Interop.GetProcAddress(Base, "glLightiv").ToPointer();
        glLineStipple = (delegate* unmanaged<int, ushort, void>)Interop.GetProcAddress(Base, "glLineStipple").ToPointer();
        glLineWidth = (delegate* unmanaged<float, void>)Interop.GetProcAddress(Base, "glLineWidth").ToPointer();
        glListBase = (delegate* unmanaged<uint, void>)Interop.GetProcAddress(Base, "glListBase").ToPointer();
        glLoadIdentity = (delegate* unmanaged<void>)Interop.GetProcAddress(Base, "glLoadIdentity").ToPointer();
        glLoadMatrixd = (delegate* unmanaged<double*, void>)Interop.GetProcAddress(Base, "glLoadMatrixd").ToPointer();
        glLoadMatrixf = (delegate* unmanaged<float*, void>)Interop.GetProcAddress(Base, "glLoadMatrixf").ToPointer();
        glLoadName = (delegate* unmanaged<uint, void>)Interop.GetProcAddress(Base, "glLoadName").ToPointer();
        glLogicOp = (delegate* unmanaged<Enums.OpCode, void>)Interop.GetProcAddress(Base, "glLogicOp").ToPointer();
        glMap1d = (delegate* unmanaged<Enums.Map1Target, double, double, int, int, double*, void>)Interop.GetProcAddress(Base, "glMap1d").ToPointer();
        glMap1f = (delegate* unmanaged<Enums.Map1Target, float, float, int, int, float*, void>)Interop.GetProcAddress(Base, "glMap1f").ToPointer();
        glMap2d = (delegate* unmanaged<Enums.Map1Target, double, double, int, int, double, double, int, int, double*, void>)Interop.GetProcAddress(Base, "glMap2d").ToPointer();
        glMap2f = (delegate* unmanaged<Enums.Map1Target, float, float, int, int, float, float, int, int, float*, void>)Interop.GetProcAddress(Base, "glMap2f").ToPointer();
        glMapGrid1d = (delegate* unmanaged<int, double, double, void>)Interop.GetProcAddress(Base, "glMapGrid1d").ToPointer();
        glMapGrid1f = (delegate* unmanaged<int, float, float, void>)Interop.GetProcAddress(Base, "glMapGrid1f").ToPointer();
        glMapGrid2d = (delegate* unmanaged<int, double, double, int, double, double, void>)Interop.GetProcAddress(Base, "glMapGrid2d").ToPointer();
        glMapGrid2f = (delegate* unmanaged<int, float, float, int, float, float, void>)Interop.GetProcAddress(Base, "glMapGrid2f").ToPointer();
        glMaterialf = (delegate* unmanaged<Enums.Side, int, float, void>)Interop.GetProcAddress(Base, "glMaterialf").ToPointer();
        glMaterialfv = (delegate* unmanaged<Enums.Side, Enums.MaterialParam, float*, void>)Interop.GetProcAddress(Base, "glMaterialfv").ToPointer();
        glMateriali = (delegate* unmanaged<Enums.Side, Enums.MaterialParam, int, void>)Interop.GetProcAddress(Base, "glMateriali").ToPointer();
        glMaterialiv = (delegate* unmanaged<Enums.Side, Enums.MaterialParam, int*, void>)Interop.GetProcAddress(Base, "glMaterialiv").ToPointer();
        glMatrixMode = (delegate* unmanaged<Enums.Matrix, void>)Interop.GetProcAddress(Base, "glMatrixMode").ToPointer();
        glMultMatrixd = (delegate* unmanaged<double*, void>)Interop.GetProcAddress(Base, "glMultMatrixd").ToPointer();
        glMultMatrixf = (delegate* unmanaged<float*, void>)Interop.GetProcAddress(Base, "glMultMatrixf").ToPointer();
        glNewList = (delegate* unmanaged<uint, Enums.Compile, void>)Interop.GetProcAddress(Base, "glNewList").ToPointer();
        glNormal3b = (delegate* unmanaged<sbyte, sbyte, sbyte, void>)Interop.GetProcAddress(Base, "glNormal3b").ToPointer();
        glNormal3bv = (delegate* unmanaged<sbyte*, void>)Interop.GetProcAddress(Base, "glNormal3bv").ToPointer();
        glNormal3d = (delegate* unmanaged<double, double, double, void>)Interop.GetProcAddress(Base, "glNormal3d").ToPointer();
        glNormal3dv = (delegate* unmanaged<double*, void>)Interop.GetProcAddress(Base, "glNormal3dv").ToPointer();
        glNormal3f = (delegate* unmanaged<float, float, float, void>)Interop.GetProcAddress(Base, "glNormal3f").ToPointer();
        glNormal3fv = (delegate* unmanaged<float*, void>)Interop.GetProcAddress(Base, "glNormal3fv").ToPointer();
        glNormal3i = (delegate* unmanaged<int, int, int, void>)Interop.GetProcAddress(Base, "glNormal3i").ToPointer();
        glNormal3iv = (delegate* unmanaged<int*, void>)Interop.GetProcAddress(Base, "glNormal3iv").ToPointer();
        glNormal3s = (delegate* unmanaged<short, short, short, void>)Interop.GetProcAddress(Base, "glNormal3s").ToPointer();
        glNormal3sv = (delegate* unmanaged<short*, void>)Interop.GetProcAddress(Base, "glNormal3sv").ToPointer();
        glNormalPointer = (delegate* unmanaged<Enums.PtrType, int, void*, void>)Interop.GetProcAddress(Base, "glNormalPointer").ToPointer();
        glOrtho = (delegate* unmanaged<double, double, double, double, double, double, void>)Interop.GetProcAddress(Base, "glOrtho").ToPointer();
        glPassThrough = (delegate* unmanaged<float, void>)Interop.GetProcAddress(Base, "glPassThrough").ToPointer();
        glPixelMapfv = (delegate* unmanaged<Enums.Map, int, float*, void>)Interop.GetProcAddress(Base, "glPixelMapfv").ToPointer();
        glPixelMapuiv = (delegate* unmanaged<Enums.Map, int, uint*, void>)Interop.GetProcAddress(Base, "glPixelMapuiv").ToPointer();
        glPixelMapusv = (delegate* unmanaged<Enums.Map, int, ushort*, void>)Interop.GetProcAddress(Base, "glPixelMapusv").ToPointer();
        glPixelStoref = (delegate* unmanaged<Enums.StoreN, float, void>)Interop.GetProcAddress(Base, "glPixelStoref").ToPointer();
        glPixelStorei = (delegate* unmanaged<Enums.StoreN, int, void>)Interop.GetProcAddress(Base, "glPixelStorei").ToPointer();
        glPixelTransferf = (delegate* unmanaged<Enums.TransferN, float, void>)Interop.GetProcAddress(Base, "glPixelTransferf").ToPointer();
        glPixelTransferi = (delegate* unmanaged<Enums.TransferN, int, void>)Interop.GetProcAddress(Base, "glPixelTransferi").ToPointer();
        glPixelZoom = (delegate* unmanaged<float, float, void>)Interop.GetProcAddress(Base, "glPixelZoom").ToPointer();
        glPointSize = (delegate* unmanaged<float, void>)Interop.GetProcAddress(Base, "glPointSize").ToPointer();
        glPolygonMode = (delegate* unmanaged<Enums.MaterialFace, Enums.Mesh, void>)Interop.GetProcAddress(Base, "glPolygonMode").ToPointer();
        glPolygonOffset = (delegate* unmanaged<float, float, void>)Interop.GetProcAddress(Base, "glPolygonOffset").ToPointer();
        glPolygonStipple = (delegate* unmanaged<byte*, void>)Interop.GetProcAddress(Base, "glPolygonStipple").ToPointer();
        glPopAttrib = (delegate* unmanaged<void>)Interop.GetProcAddress(Base, "glPopAttrib").ToPointer();
        glPopClientAttrib = (delegate* unmanaged<void>)Interop.GetProcAddress(Base, "glPopClientAttrib").ToPointer();
        glPopMatrix = (delegate* unmanaged<void>)Interop.GetProcAddress(Base, "glPopMatrix").ToPointer();
        glPopName = (delegate* unmanaged<void>)Interop.GetProcAddress(Base, "glPopName").ToPointer();
        glPrioritizeTextures = (delegate* unmanaged<int, uint*, float*, void>)Interop.GetProcAddress(Base, "glPrioritizeTextures").ToPointer();
        glPushAttrib = (delegate* unmanaged<uint, void>)Interop.GetProcAddress(Base, "glPushAttrib").ToPointer();
        glPushClientAttrib = (delegate* unmanaged<uint, void>)Interop.GetProcAddress(Base, "glPushClientAttrib").ToPointer();
        glPushMatrix = (delegate* unmanaged<void>)Interop.GetProcAddress(Base, "glPushMatrix").ToPointer();
        glPushName = (delegate* unmanaged<uint, void>)Interop.GetProcAddress(Base, "glPushName").ToPointer();
        glRasterPos2d = (delegate* unmanaged<double, double, void>)Interop.GetProcAddress(Base, "glRasterPos2d").ToPointer();
        glRasterPos2dv = (delegate* unmanaged<double*, void>)Interop.GetProcAddress(Base, "glRasterPos2dv").ToPointer();
        glRasterPos2f = (delegate* unmanaged<float, float, void>)Interop.GetProcAddress(Base, "glRasterPos2f").ToPointer();
        glRasterPos2fv = (delegate* unmanaged<float*, void>)Interop.GetProcAddress(Base, "glRasterPos2fv").ToPointer();
        glRasterPos2i = (delegate* unmanaged<int, int, void>)Interop.GetProcAddress(Base, "glRasterPos2i").ToPointer();
        glRasterPos2iv = (delegate* unmanaged<int*, void>)Interop.GetProcAddress(Base, "glRasterPos2iv").ToPointer();
        glRasterPos2s = (delegate* unmanaged<short, short, void>)Interop.GetProcAddress(Base, "glRasterPos2s").ToPointer();
        glRasterPos2sv = (delegate* unmanaged<short*, void>)Interop.GetProcAddress(Base, "glRasterPos2sv").ToPointer();
        glRasterPos3d = (delegate* unmanaged<double, double, double, void>)Interop.GetProcAddress(Base, "glRasterPos3d").ToPointer();
        glRasterPos3dv = (delegate* unmanaged<double*, void>)Interop.GetProcAddress(Base, "glRasterPos3dv").ToPointer();
        glRasterPos3f = (delegate* unmanaged<float, float, float, void>)Interop.GetProcAddress(Base, "glRasterPos3f").ToPointer();
        glRasterPos3fv = (delegate* unmanaged<float*, void>)Interop.GetProcAddress(Base, "glRasterPos3fv").ToPointer();
        glRasterPos3i = (delegate* unmanaged<int, int, int, void>)Interop.GetProcAddress(Base, "glRasterPos3i").ToPointer();
        glRasterPos3iv = (delegate* unmanaged<int*, void>)Interop.GetProcAddress(Base, "glRasterPos3iv").ToPointer();
        glRasterPos3s = (delegate* unmanaged<short, short, short, void>)Interop.GetProcAddress(Base, "glRasterPos3s").ToPointer();
        glRasterPos3sv = (delegate* unmanaged<short*, void>)Interop.GetProcAddress(Base, "glRasterPos3sv").ToPointer();
        glRasterPos4d = (delegate* unmanaged<double, double, double, double, void>)Interop.GetProcAddress(Base, "glRasterPos4d").ToPointer();
        glRasterPos4dv = (delegate* unmanaged<double*, void>)Interop.GetProcAddress(Base, "glRasterPos4dv").ToPointer();
        glRasterPos4f = (delegate* unmanaged<float, float, float, float, void>)Interop.GetProcAddress(Base, "glRasterPos4f").ToPointer();
        glRasterPos4fv = (delegate* unmanaged<float*, void>)Interop.GetProcAddress(Base, "glRasterPos4fv").ToPointer();
        glRasterPos4i = (delegate* unmanaged<int, int, int, int, void>)Interop.GetProcAddress(Base, "glRasterPos4i").ToPointer();
        glRasterPos4iv = (delegate* unmanaged<int*, void>)Interop.GetProcAddress(Base, "glRasterPos4iv").ToPointer();
        glRasterPos4s = (delegate* unmanaged<short, short, short, short, void>)Interop.GetProcAddress(Base, "glRasterPos4s").ToPointer();
        glRasterPos4sv = (delegate* unmanaged<short*, void>)Interop.GetProcAddress(Base, "glRasterPos4sv").ToPointer();
        glReadBuffer = (delegate* unmanaged<Enums.Buf, void>)Interop.GetProcAddress(Base, "glReadBuffer").ToPointer();
        glReadPixels = (delegate* unmanaged<int, int, int, int, Enums.Image, Enums.ReadType, void*, void>)Interop.GetProcAddress(Base, "glReadPixels").ToPointer();
        glRectd = (delegate* unmanaged<double, double, double, double, void>)Interop.GetProcAddress(Base, "glRectd").ToPointer();
        glRectdv = (delegate* unmanaged<double*, double*, void>)Interop.GetProcAddress(Base, "glRectdv").ToPointer();
        glRectf = (delegate* unmanaged<float, float, float, float, void>)Interop.GetProcAddress(Base, "glRectf").ToPointer();
        glRectfv = (delegate* unmanaged<float*, float*, void>)Interop.GetProcAddress(Base, "glRectfv").ToPointer();
        glRecti = (delegate* unmanaged<int, int, int, int, void>)Interop.GetProcAddress(Base, "glRecti").ToPointer();
        glRectiv = (delegate* unmanaged<int*, int*, void>)Interop.GetProcAddress(Base, "glRectiv").ToPointer();
        glRects = (delegate* unmanaged<short, short, short, short, void>)Interop.GetProcAddress(Base, "glRects").ToPointer();
        glRectsv = (delegate* unmanaged<short*, short*, void>)Interop.GetProcAddress(Base, "glRectsv").ToPointer();
        glRenderMode = (delegate* unmanaged<Enums.Render, int>)Interop.GetProcAddress(Base, "glRenderMode").ToPointer();
        glRotated = (delegate* unmanaged<double, double, double, double, void>)Interop.GetProcAddress(Base, "glRotated").ToPointer();
        glRotatef = (delegate* unmanaged<float, float, float, float, void>)Interop.GetProcAddress(Base, "glRotatef").ToPointer();
        glScaled = (delegate* unmanaged<double, double, double, void>)Interop.GetProcAddress(Base, "glScaled").ToPointer();
        glScalef = (delegate* unmanaged<float, float, float, void>)Interop.GetProcAddress(Base, "glScalef").ToPointer();
        glScissor = (delegate* unmanaged<int, int, int, int, void>)Interop.GetProcAddress(Base, "glScissor").ToPointer();
        glSelectBuffer = (delegate* unmanaged<int, uint*, void>)Interop.GetProcAddress(Base, "glSelectBuffer").ToPointer();
        glShadeModel = (delegate* unmanaged<Enums.Fill, void>)Interop.GetProcAddress(Base, "glShadeModel").ToPointer();
        glStencilFunc = (delegate* unmanaged<Enums.Func, int, uint, void>)Interop.GetProcAddress(Base, "glStencilFunc").ToPointer();
        glStencilMask = (delegate* unmanaged<uint, void>)Interop.GetProcAddress(Base, "glStencilMask").ToPointer();
        glStencilOp = (delegate* unmanaged<Enums.Fail, Enums.Fail, Enums.Fail, void>)Interop.GetProcAddress(Base, "glStencilOp").ToPointer();
        glTexCoord1d = (delegate* unmanaged<double, void>)Interop.GetProcAddress(Base, "glTexCoord1d").ToPointer();
        glTexCoord1dv = (delegate* unmanaged<double*, void>)Interop.GetProcAddress(Base, "glTexCoord1dv").ToPointer();
        glTexCoord1f = (delegate* unmanaged<float, void>)Interop.GetProcAddress(Base, "glTexCoord1f").ToPointer();
        glTexCoord1fv = (delegate* unmanaged<float*, void>)Interop.GetProcAddress(Base, "glTexCoord1fv").ToPointer();
        glTexCoord1i = (delegate* unmanaged<int, void>)Interop.GetProcAddress(Base, "glTexCoord1i").ToPointer();
        glTexCoord1iv = (delegate* unmanaged<int*, void>)Interop.GetProcAddress(Base, "glTexCoord1iv").ToPointer();
        glTexCoord1s = (delegate* unmanaged<short, void>)Interop.GetProcAddress(Base, "glTexCoord1s").ToPointer();
        glTexCoord1sv = (delegate* unmanaged<short*, void>)Interop.GetProcAddress(Base, "glTexCoord1sv").ToPointer();
        glTexCoord2d = (delegate* unmanaged<double, double, void>)Interop.GetProcAddress(Base, "glTexCoord2d").ToPointer();
        glTexCoord2dv = (delegate* unmanaged<double*, void>)Interop.GetProcAddress(Base, "glTexCoord2dv").ToPointer();
        glTexCoord2f = (delegate* unmanaged<float, float, void>)Interop.GetProcAddress(Base, "glTexCoord2f").ToPointer();
        glTexCoord2fv = (delegate* unmanaged<float*, void>)Interop.GetProcAddress(Base, "glTexCoord2fv").ToPointer();
        glTexCoord2i = (delegate* unmanaged<int, int, void>)Interop.GetProcAddress(Base, "glTexCoord2i").ToPointer();
        glTexCoord2iv = (delegate* unmanaged<int*, void>)Interop.GetProcAddress(Base, "glTexCoord2iv").ToPointer();
        glTexCoord2s = (delegate* unmanaged<short, short, void>)Interop.GetProcAddress(Base, "glTexCoord2s").ToPointer();
        glTexCoord2sv = (delegate* unmanaged<short*, void>)Interop.GetProcAddress(Base, "glTexCoord2sv").ToPointer();
        glTexCoord3d = (delegate* unmanaged<double, double, double, void>)Interop.GetProcAddress(Base, "glTexCoord3d").ToPointer();
        glTexCoord3dv = (delegate* unmanaged<double*, void>)Interop.GetProcAddress(Base, "glTexCoord3dv").ToPointer();
        glTexCoord3f = (delegate* unmanaged<float, float, float, void>)Interop.GetProcAddress(Base, "glTexCoord3f").ToPointer();
        glTexCoord3fv = (delegate* unmanaged<float*, void>)Interop.GetProcAddress(Base, "glTexCoord3fv").ToPointer();
        glTexCoord3i = (delegate* unmanaged<int, int, int, void>)Interop.GetProcAddress(Base, "glTexCoord3i").ToPointer();
        glTexCoord3iv = (delegate* unmanaged<int*, void>)Interop.GetProcAddress(Base, "glTexCoord3iv").ToPointer();
        glTexCoord3s = (delegate* unmanaged<short, short, short, void>)Interop.GetProcAddress(Base, "glTexCoord3s").ToPointer();
        glTexCoord3sv = (delegate* unmanaged<short*, void>)Interop.GetProcAddress(Base, "glTexCoord3sv").ToPointer();
        glTexCoord4d = (delegate* unmanaged<double, double, double, double, void>)Interop.GetProcAddress(Base, "glTexCoord4d").ToPointer();
        glTexCoord4dv = (delegate* unmanaged<double*, void>)Interop.GetProcAddress(Base, "glTexCoord4dv").ToPointer();
        glTexCoord4f = (delegate* unmanaged<float, float, float, float, void>)Interop.GetProcAddress(Base, "glTexCoord4f").ToPointer();
        glTexCoord4fv = (delegate* unmanaged<float*, void>)Interop.GetProcAddress(Base, "glTexCoord4fv").ToPointer();
        glTexCoord4i = (delegate* unmanaged<int, int, int, int, void>)Interop.GetProcAddress(Base, "glTexCoord4i").ToPointer();
        glTexCoord4iv = (delegate* unmanaged<int*, void>)Interop.GetProcAddress(Base, "glTexCoord4iv").ToPointer();
        glTexCoord4s = (delegate* unmanaged<short, short, short, short, void>)Interop.GetProcAddress(Base, "glTexCoord4s").ToPointer();
        glTexCoord4sv = (delegate* unmanaged<short*, void>)Interop.GetProcAddress(Base, "glTexCoord4sv").ToPointer();
        glTexCoordPointer = (delegate* unmanaged<int, Enums.TexType, int, void*, void>)Interop.GetProcAddress(Base, "glTexCoordPointer").ToPointer();
        glTexEnvf = (delegate* unmanaged<int, Enums.TexEnvN, float, void>)Interop.GetProcAddress(Base, "glTexEnvf").ToPointer();
        glTexEnvfv = (delegate* unmanaged<int, Enums.TexEnvN, float*, void>)Interop.GetProcAddress(Base, "glTexEnvfv").ToPointer();
        glTexEnvi = (delegate* unmanaged<int, Enums.TexEnvN, int, void>)Interop.GetProcAddress(Base, "glTexEnvi").ToPointer();
        glTexEnviv = (delegate* unmanaged<int, Enums.TexEnvN, int*, void>)Interop.GetProcAddress(Base, "glTexEnviv").ToPointer();
        glTexGend = (delegate* unmanaged<Enums.Coords, Enums.TexGen, double, void>)Interop.GetProcAddress(Base, "glTexGend").ToPointer();
        glTexGendv = (delegate* unmanaged<Enums.Coords, Enums.TexGen, double*, void>)Interop.GetProcAddress(Base, "glTexGendv").ToPointer();
        glTexGenf = (delegate* unmanaged<Enums.Coords, Enums.TexGen, float, void>)Interop.GetProcAddress(Base, "glTexGenf").ToPointer();
        glTexGenfv = (delegate* unmanaged<Enums.Coords, Enums.TexGen, float*, void>)Interop.GetProcAddress(Base, "glTexGenfv").ToPointer();
        glTexGeni = (delegate* unmanaged<Enums.Coords, Enums.TexGen, int, void>)Interop.GetProcAddress(Base, "glTexGeni").ToPointer();
        glTexGeniv = (delegate* unmanaged<Enums.Coords, Enums.TexGen, int*, void>)Interop.GetProcAddress(Base, "glTexGeniv").ToPointer();
        glTexImage1D = (delegate* unmanaged<int, int, int, int, int, Enums.ImageFormat, Enums.ImageType, void*, void>)Interop.GetProcAddress(Base, "glTexImage1D").ToPointer();
        glTexImage2D = (delegate* unmanaged<int, int, int, int, int, int, Enums.ImageFormat, Enums.ImageType, void*, void>)Interop.GetProcAddress(Base, "glTexImage2D").ToPointer();
        glTexParameterf = (delegate* unmanaged<Enums.TexTarget, Enums.TexNV2, float, void>)Interop.GetProcAddress(Base, "glTexParameterf").ToPointer();
        glTexParameterfv = (delegate* unmanaged<Enums.TexTarget, Enums.TexNV2, float*, void>)Interop.GetProcAddress(Base, "glTexParameterfv").ToPointer();
        glTexParameteri = (delegate* unmanaged<Enums.TexTarget, Enums.TexNV2, int, void>)Interop.GetProcAddress(Base, "glTexParameteri").ToPointer();
        glTexParameteriv = (delegate* unmanaged<Enums.TexTarget, Enums.TexNV2, int*, void>)Interop.GetProcAddress(Base, "glTexParameteriv").ToPointer();
        glTexSubImage1D = (delegate* unmanaged<int, int, int, int, Enums.ImageFormat, Enums.ImageType, void*, void>)Interop.GetProcAddress(Base, "glTexSubImage1D").ToPointer();
        glTexSubImage2D = (delegate* unmanaged<int, int, int, int, int, int, Enums.ImageFormat, Enums.ImageType, void*, void>)Interop.GetProcAddress(Base, "glTexSubImage2D").ToPointer();
        glTranslated = (delegate* unmanaged<double, double, double, void>)Interop.GetProcAddress(Base, "glTranslated").ToPointer();
        glTranslatef = (delegate* unmanaged<float, float, float, void>)Interop.GetProcAddress(Base, "glTranslatef").ToPointer();
        glVertex2d = (delegate* unmanaged<double, double, void>)Interop.GetProcAddress(Base, "glVertex2d").ToPointer();
        glVertex2dv = (delegate* unmanaged<double*, void>)Interop.GetProcAddress(Base, "glVertex2dv").ToPointer();
        glVertex2f = (delegate* unmanaged<float, float, void>)Interop.GetProcAddress(Base, "glVertex2f").ToPointer();
        glVertex2fv = (delegate* unmanaged<float*, void>)Interop.GetProcAddress(Base, "glVertex2fv").ToPointer();
        glVertex2i = (delegate* unmanaged<int, int, void>)Interop.GetProcAddress(Base, "glVertex2i").ToPointer();
        glVertex2iv = (delegate* unmanaged<int*, void>)Interop.GetProcAddress(Base, "glVertex2iv").ToPointer();
        glVertex2s = (delegate* unmanaged<short, short, void>)Interop.GetProcAddress(Base, "glVertex2s").ToPointer();
        glVertex2sv = (delegate* unmanaged<short*, void>)Interop.GetProcAddress(Base, "glVertex2sv").ToPointer();
        glVertex3d = (delegate* unmanaged<double, double, double, void>)Interop.GetProcAddress(Base, "glVertex3d").ToPointer();
        glVertex3dv = (delegate* unmanaged<double*, void>)Interop.GetProcAddress(Base, "glVertex3dv").ToPointer();
        glVertex3f = (delegate* unmanaged<float, float, float, void>)Interop.GetProcAddress(Base, "glVertex3f").ToPointer();
        glVertex3fv = (delegate* unmanaged<float*, void>)Interop.GetProcAddress(Base, "glVertex3fv").ToPointer();
        glVertex3i = (delegate* unmanaged<int, int, int, void>)Interop.GetProcAddress(Base, "glVertex3i").ToPointer();
        glVertex3iv = (delegate* unmanaged<int*, void>)Interop.GetProcAddress(Base, "glVertex3iv").ToPointer();
        glVertex3s = (delegate* unmanaged<short, short, short, void>)Interop.GetProcAddress(Base, "glVertex3s").ToPointer();
        glVertex3sv = (delegate* unmanaged<short*, void>)Interop.GetProcAddress(Base, "glVertex3sv").ToPointer();
        glVertex4d = (delegate* unmanaged<double, double, double, double, void>)Interop.GetProcAddress(Base, "glVertex4d").ToPointer();
        glVertex4dv = (delegate* unmanaged<double*, void>)Interop.GetProcAddress(Base, "glVertex4dv").ToPointer();
        glVertex4f = (delegate* unmanaged<float, float, float, float, void>)Interop.GetProcAddress(Base, "glVertex4f").ToPointer();
        glVertex4fv = (delegate* unmanaged<float*, void>)Interop.GetProcAddress(Base, "glVertex4fv").ToPointer();
        glVertex4i = (delegate* unmanaged<int, int, int, int, void>)Interop.GetProcAddress(Base, "glVertex4i").ToPointer();
        glVertex4iv = (delegate* unmanaged<int*, void>)Interop.GetProcAddress(Base, "glVertex4iv").ToPointer();
        glVertex4s = (delegate* unmanaged<short, short, short, short, void>)Interop.GetProcAddress(Base, "glVertex4s").ToPointer();
        glVertex4sv = (delegate* unmanaged<short*, void>)Interop.GetProcAddress(Base, "glVertex4sv").ToPointer();
        glVertexPointer = (delegate* unmanaged<int, Enums.TexType, int, void*, void>)Interop.GetProcAddress(Base, "glVertexPointer").ToPointer();
        glViewport = (delegate* unmanaged<int, int, int, int, void>)Interop.GetProcAddress(Base, "glViewport").ToPointer();
    }

    public IntPtr Base;
    public delegate* unmanaged<Enums.Op, float, void> glAccum;
    public delegate* unmanaged<Enums.Func, float, void> glAlphaFunc;
    public delegate* unmanaged<int, uint*, byte*, byte> glAreTexturesResident;
    public delegate* unmanaged<int, void> glArrayElement;
    public delegate* unmanaged<Enums.Mode, void> glBegin;
    public delegate* unmanaged<Enums.TexPTarget, uint, void> glBindTexture;
    public delegate* unmanaged<int, int, float, float, float, float, byte*, void> glBitmap;
    public delegate* unmanaged<Enums.Factor, Enums.Factor, void> glBlendFunc;
    public delegate* unmanaged<uint, void> glCallList;
    public delegate* unmanaged<int, Enums.Type, void*, void> glCallLists;
    public delegate* unmanaged<uint, void> glClear;
    public delegate* unmanaged<float, float, float, float, void> glClearAccum;
    public delegate* unmanaged<float, float, float, float, void> glClearColor;
    public delegate* unmanaged<double, void> glClearDepth;
    public delegate* unmanaged<float, void> glClearIndex;
    public delegate* unmanaged<int, void> glClearStencil;
    public delegate* unmanaged<Enums.Plane, double*, void> glClipPlane;
    public delegate* unmanaged<sbyte, sbyte, sbyte, void> glColor3b;
    public delegate* unmanaged<sbyte*, void> glColor3bv;
    public delegate* unmanaged<double, double, double, void> glColor3d;
    public delegate* unmanaged<double*, void> glColor3dv;
    public delegate* unmanaged<float, float, float, void> glColor3f;
    public delegate* unmanaged<float*, void> glColor3fv;
    public delegate* unmanaged<int, int, int, void> glColor3i;
    public delegate* unmanaged<int*, void> glColor3iv;
    public delegate* unmanaged<short, short, short, void> glColor3s;
    public delegate* unmanaged<short*, void> glColor3sv;
    public delegate* unmanaged<byte, byte, byte, void> glColor3ub;
    public delegate* unmanaged<byte*, void> glColor3ubv;
    public delegate* unmanaged<uint, uint, uint, void> glColor3ui;
    public delegate* unmanaged<uint*, void> glColor3uiv;
    public delegate* unmanaged<ushort, ushort, ushort, void> glColor3us;
    public delegate* unmanaged<ushort*, void> glColor3usv;
    public delegate* unmanaged<sbyte, sbyte, sbyte, sbyte, void> glColor4b;
    public delegate* unmanaged<sbyte*, void> glColor4bv;
    public delegate* unmanaged<double, double, double, double, void> glColor4d;
    public delegate* unmanaged<double*, void> glColor4dv;
    public delegate* unmanaged<float, float, float, float, void> glColor4f;
    public delegate* unmanaged<float*, void> glColor4fv;
    public delegate* unmanaged<int, int, int, int, void> glColor4i;
    public delegate* unmanaged<int*, void> glColor4iv;
    public delegate* unmanaged<short, short, short, short, void> glColor4s;
    public delegate* unmanaged<short*, void> glColor4sv;
    public delegate* unmanaged<byte, byte, byte, byte, void> glColor4ub;
    public delegate* unmanaged<byte*, void> glColor4ubv;
    public delegate* unmanaged<uint, uint, uint, uint, void> glColor4ui;
    public delegate* unmanaged<uint*, void> glColor4uiv;
    public delegate* unmanaged<ushort, ushort, ushort, ushort, void> glColor4us;
    public delegate* unmanaged<ushort*, void> glColor4usv;
    public delegate* unmanaged<byte, byte, byte, byte, void> glColorMask;
    public delegate* unmanaged<Enums.Face, Enums.MaterialParam, void> glColorMaterial;
    public delegate* unmanaged<int, Enums.BType, int, void*, void> glColorPointer;
    public delegate* unmanaged<int, int, int, int, Enums.CopyType, void> glCopyPixels;
    public delegate* unmanaged<Enums.TexPTarget, int, Enums.InternalFormat, int, int, int, int, void> glCopyTexImage1D;
    public delegate* unmanaged<Enums.TexPTarget, int, Enums.InternalFormat, int, int, int, int, int, void> glCopyTexImage2D;
    public delegate* unmanaged<Enums.TexPTarget, int, int, int, int, int, void> glCopyTexSubImage1D;
    public delegate* unmanaged<Enums.TexPTarget, int, int, int, int, int, int, int, void> glCopyTexSubImage2D;
    public delegate* unmanaged<Enums.Face, void> glCullFace;
    public delegate* unmanaged<uint, int, void> glDeleteLists;
    public delegate* unmanaged<int, uint*, void> glDeleteTextures;
    public delegate* unmanaged<Enums.Func, void> glDepthFunc;
    public delegate* unmanaged<byte, void> glDepthMask;
    public delegate* unmanaged<double, double, void> glDepthRange;
    public delegate* unmanaged<Enums.Cap, void> glDisable;
    public delegate* unmanaged<Enums.ArrayState, void> glDisableClientState;
    public delegate* unmanaged<Enums.Mode, int, int, void> glDrawArrays;
    public delegate* unmanaged<Enums.Mode, void> glDrawBuffer;
    public delegate* unmanaged<Enums.Mode, int, Enums.BUType, void*, void> glDrawElements;
    public delegate* unmanaged<int, int, Enums.ImageFormat, Enums.BType, void*, void> glDrawPixels;
    public delegate* unmanaged<byte, void> glEdgeFlag;
    public delegate* unmanaged<int, void*, void> glEdgeFlagPointer;
    public delegate* unmanaged<byte*, void> glEdgeFlagv;
    public delegate* unmanaged<Enums.Cap, void> glEnable;
    public delegate* unmanaged<Enums.ArrayState, void> glEnableClientState;
    public delegate* unmanaged<void> glEnd;
    public delegate* unmanaged<void> glEndList;
    public delegate* unmanaged<double, void> glEvalCoord1d;
    public delegate* unmanaged<double*, void> glEvalCoord1dv;
    public delegate* unmanaged<float, void> glEvalCoord1f;
    public delegate* unmanaged<float*, void> glEvalCoord1fv;
    public delegate* unmanaged<double, double, void> glEvalCoord2d;
    public delegate* unmanaged<double*, void> glEvalCoord2dv;
    public delegate* unmanaged<float, float, void> glEvalCoord2f;
    public delegate* unmanaged<float*, void> glEvalCoord2fv;
    public delegate* unmanaged<Enums.EMesh, int, int, void> glEvalMesh1;
    public delegate* unmanaged<Enums.Mesh, int, int, int, int, void> glEvalMesh2;
    public delegate* unmanaged<int, void> glEvalPoint1;
    public delegate* unmanaged<int, int, void> glEvalPoint2;
    public delegate* unmanaged<int, Enums.Vertex, float*, void> glFeedbackBuffer;
    public delegate* unmanaged<void> glFinish;
    public delegate* unmanaged<void> glFlush;
    public delegate* unmanaged<Enums.Fog, float, void> glFogf;
    public delegate* unmanaged<Enums.Fog, float*, void> glFogfv;
    public delegate* unmanaged<Enums.Fog, int, void> glFogi;
    public delegate* unmanaged<Enums.Fog, int*, void> glFogiv;
    public delegate* unmanaged<Enums.FaceMode, void> glFrontFace;
    public delegate* unmanaged<double, double, double, double, double, double, void> glFrustum;
    public delegate* unmanaged<int, uint> glGenLists;
    public delegate* unmanaged<int, uint*, void> glGenTextures;
    public delegate* unmanaged<Enums.PName, byte*, void> glGetBooleanv;
    public delegate* unmanaged<Enums.Plane, double*, void> glGetClipPlane;
    public delegate* unmanaged<Enums.PName, double*, void> glGetDoublev;
    public delegate* unmanaged<Enums.Error> glGetError;
    public delegate* unmanaged<Enums.PName, float*, void> glGetFloatv;
    public delegate* unmanaged<Enums.PName, int*, void> glGetIntegerv;
    public delegate* unmanaged<Enums.Light, Enums.LightN, float*, void> glGetLightfv;
    public delegate* unmanaged<Enums.Light, Enums.LightN, int*, void> glGetLightiv;
    public delegate* unmanaged<Enums.MapTarget, Enums.Query, double*, void> glGetMapdv;
    public delegate* unmanaged<Enums.MapTarget, Enums.Query, float*, void> glGetMapfv;
    public delegate* unmanaged<Enums.MapTarget, Enums.Query, int*, void> glGetMapiv;
    public delegate* unmanaged<Enums.Side, Enums.MaterialParam, float*, void> glGetMaterialfv;
    public delegate* unmanaged<Enums.Side, Enums.MaterialParam, int*, void> glGetMaterialiv;
    public delegate* unmanaged<Enums.Map, float*, void> glGetPixelMapfv;
    public delegate* unmanaged<Enums.Map, uint*, void> glGetPixelMapuiv;
    public delegate* unmanaged<Enums.Map, ushort*, void> glGetPixelMapusv;
    public delegate* unmanaged<Enums.PNamePtr, void**, void> glGetPointerv;
    public delegate* unmanaged<byte*, void> glGetPolygonStipple;
    public delegate* unmanaged<Enums.StringName, byte*> glGetString;
    public delegate* unmanaged<int, Enums.TexEnvN, float*, void> glGetTexEnvfv;
    public delegate* unmanaged<int, Enums.TexEnvN, int*, void> glGetTexEnviv;
    public delegate* unmanaged<Enums.Coords, Enums.TexGenN, double*, void> glGetTexGendv;
    public delegate* unmanaged<Enums.Coords, Enums.TexGenN, float*, void> glGetTexGenfv;
    public delegate* unmanaged<Enums.Coords, Enums.TexGenN, int*, void> glGetTexGeniv;
    public delegate* unmanaged<Enums.TexTarget, int, Enums.Image, Enums.BType, void*, void> glGetTexImage;
    public delegate* unmanaged<Enums.TexPTarget, int, Enums.TexN, float*, void> glGetTexLevelParameterfv;
    public delegate* unmanaged<Enums.TexPTarget, int, Enums.TexN, int*, void> glGetTexLevelParameteriv;
    public delegate* unmanaged<Enums.TexTarget, Enums.TexNV, float*, void> glGetTexParameterfv;
    public delegate* unmanaged<Enums.TexTarget, Enums.TexNV, int*, void> glGetTexParameteriv;
    public delegate* unmanaged<Enums.Hint, Enums.Calc, void> glHint;
    public delegate* unmanaged<uint, void> glIndexMask;
    public delegate* unmanaged<Enums.TexType, int, void*, void> glIndexPointer;
    public delegate* unmanaged<double, void> glIndexd;
    public delegate* unmanaged<double*, void> glIndexdv;
    public delegate* unmanaged<float, void> glIndexf;
    public delegate* unmanaged<float*, void> glIndexfv;
    public delegate* unmanaged<int, void> glIndexi;
    public delegate* unmanaged<int*, void> glIndexiv;
    public delegate* unmanaged<short, void> glIndexs;
    public delegate* unmanaged<short*, void> glIndexsv;
    public delegate* unmanaged<byte, void> glIndexub;
    public delegate* unmanaged<byte*, void> glIndexubv;
    public delegate* unmanaged<void> glInitNames;
    public delegate* unmanaged<Enums.ArrayFormat, int, void*, void> glInterleavedArrays;
    public delegate* unmanaged<Enums.Cap, byte> glIsEnabled;
    public delegate* unmanaged<uint, byte> glIsList;
    public delegate* unmanaged<uint, byte> glIsTexture;
    public delegate* unmanaged<Enums.LightModel, float, void> glLightModelf;
    public delegate* unmanaged<Enums.LightModel, float*, void> glLightModelfv;
    public delegate* unmanaged<Enums.LightModel, int, void> glLightModeli;
    public delegate* unmanaged<Enums.LightModel, int*, void> glLightModeliv;
    public delegate* unmanaged<Enums.Light, Enums.LightN, float, void> glLightf;
    public delegate* unmanaged<Enums.Light, Enums.LightN, float*, void> glLightfv;
    public delegate* unmanaged<Enums.Light, Enums.LightN, int, void> glLighti;
    public delegate* unmanaged<Enums.Light, Enums.LightN, int*, void> glLightiv;
    public delegate* unmanaged<int, ushort, void> glLineStipple;
    public delegate* unmanaged<float, void> glLineWidth;
    public delegate* unmanaged<uint, void> glListBase;
    public delegate* unmanaged<void> glLoadIdentity;
    public delegate* unmanaged<double*, void> glLoadMatrixd;
    public delegate* unmanaged<float*, void> glLoadMatrixf;
    public delegate* unmanaged<uint, void> glLoadName;
    public delegate* unmanaged<Enums.OpCode, void> glLogicOp;
    public delegate* unmanaged<Enums.Map1Target, double, double, int, int, double*, void> glMap1d;
    public delegate* unmanaged<Enums.Map1Target, float, float, int, int, float*, void> glMap1f;
    public delegate* unmanaged<Enums.Map1Target, double, double, int, int, double, double, int, int, double*, void> glMap2d;
    public delegate* unmanaged<Enums.Map1Target, float, float, int, int, float, float, int, int, float*, void> glMap2f;
    public delegate* unmanaged<int, double, double, void> glMapGrid1d;
    public delegate* unmanaged<int, float, float, void> glMapGrid1f;
    public delegate* unmanaged<int, double, double, int, double, double, void> glMapGrid2d;
    public delegate* unmanaged<int, float, float, int, float, float, void> glMapGrid2f;
    public delegate* unmanaged<Enums.Side, int, float, void> glMaterialf;
    public delegate* unmanaged<Enums.Side, Enums.MaterialParam, float*, void> glMaterialfv;
    public delegate* unmanaged<Enums.Side, Enums.MaterialParam, int, void> glMateriali;
    public delegate* unmanaged<Enums.Side, Enums.MaterialParam, int*, void> glMaterialiv;
    public delegate* unmanaged<Enums.Matrix, void> glMatrixMode;
    public delegate* unmanaged<double*, void> glMultMatrixd;
    public delegate* unmanaged<float*, void> glMultMatrixf;
    public delegate* unmanaged<uint, Enums.Compile, void> glNewList;
    public delegate* unmanaged<sbyte, sbyte, sbyte, void> glNormal3b;
    public delegate* unmanaged<sbyte*, void> glNormal3bv;
    public delegate* unmanaged<double, double, double, void> glNormal3d;
    public delegate* unmanaged<double*, void> glNormal3dv;
    public delegate* unmanaged<float, float, float, void> glNormal3f;
    public delegate* unmanaged<float*, void> glNormal3fv;
    public delegate* unmanaged<int, int, int, void> glNormal3i;
    public delegate* unmanaged<int*, void> glNormal3iv;
    public delegate* unmanaged<short, short, short, void> glNormal3s;
    public delegate* unmanaged<short*, void> glNormal3sv;
    public delegate* unmanaged<Enums.PtrType, int, void*, void> glNormalPointer;
    public delegate* unmanaged<double, double, double, double, double, double, void> glOrtho;
    public delegate* unmanaged<float, void> glPassThrough;
    public delegate* unmanaged<Enums.Map, int, float*, void> glPixelMapfv;
    public delegate* unmanaged<Enums.Map, int, uint*, void> glPixelMapuiv;
    public delegate* unmanaged<Enums.Map, int, ushort*, void> glPixelMapusv;
    public delegate* unmanaged<Enums.StoreN, float, void> glPixelStoref;
    public delegate* unmanaged<Enums.StoreN, int, void> glPixelStorei;
    public delegate* unmanaged<Enums.TransferN, float, void> glPixelTransferf;
    public delegate* unmanaged<Enums.TransferN, int, void> glPixelTransferi;
    public delegate* unmanaged<float, float, void> glPixelZoom;
    public delegate* unmanaged<float, void> glPointSize;
    public delegate* unmanaged<Enums.MaterialFace, Enums.Mesh, void> glPolygonMode;
    public delegate* unmanaged<float, float, void> glPolygonOffset;
    public delegate* unmanaged<byte*, void> glPolygonStipple;
    public delegate* unmanaged<void> glPopAttrib;
    public delegate* unmanaged<void> glPopClientAttrib;
    public delegate* unmanaged<void> glPopMatrix;
    public delegate* unmanaged<void> glPopName;
    public delegate* unmanaged<int, uint*, float*, void> glPrioritizeTextures;
    public delegate* unmanaged<uint, void> glPushAttrib;
    public delegate* unmanaged<uint, void> glPushClientAttrib;
    public delegate* unmanaged<void> glPushMatrix;
    public delegate* unmanaged<uint, void> glPushName;
    public delegate* unmanaged<double, double, void> glRasterPos2d;
    public delegate* unmanaged<double*, void> glRasterPos2dv;
    public delegate* unmanaged<float, float, void> glRasterPos2f;
    public delegate* unmanaged<float*, void> glRasterPos2fv;
    public delegate* unmanaged<int, int, void> glRasterPos2i;
    public delegate* unmanaged<int*, void> glRasterPos2iv;
    public delegate* unmanaged<short, short, void> glRasterPos2s;
    public delegate* unmanaged<short*, void> glRasterPos2sv;
    public delegate* unmanaged<double, double, double, void> glRasterPos3d;
    public delegate* unmanaged<double*, void> glRasterPos3dv;
    public delegate* unmanaged<float, float, float, void> glRasterPos3f;
    public delegate* unmanaged<float*, void> glRasterPos3fv;
    public delegate* unmanaged<int, int, int, void> glRasterPos3i;
    public delegate* unmanaged<int*, void> glRasterPos3iv;
    public delegate* unmanaged<short, short, short, void> glRasterPos3s;
    public delegate* unmanaged<short*, void> glRasterPos3sv;
    public delegate* unmanaged<double, double, double, double, void> glRasterPos4d;
    public delegate* unmanaged<double*, void> glRasterPos4dv;
    public delegate* unmanaged<float, float, float, float, void> glRasterPos4f;
    public delegate* unmanaged<float*, void> glRasterPos4fv;
    public delegate* unmanaged<int, int, int, int, void> glRasterPos4i;
    public delegate* unmanaged<int*, void> glRasterPos4iv;
    public delegate* unmanaged<short, short, short, short, void> glRasterPos4s;
    public delegate* unmanaged<short*, void> glRasterPos4sv;
    public delegate* unmanaged<Enums.Buf, void> glReadBuffer;
    public delegate* unmanaged<int, int, int, int, Enums.Image, Enums.ReadType, void*, void> glReadPixels;
    public delegate* unmanaged<double, double, double, double, void> glRectd;
    public delegate* unmanaged<double*, double*, void> glRectdv;
    public delegate* unmanaged<float, float, float, float, void> glRectf;
    public delegate* unmanaged<float*, float*, void> glRectfv;
    public delegate* unmanaged<int, int, int, int, void> glRecti;
    public delegate* unmanaged<int*, int*, void> glRectiv;
    public delegate* unmanaged<short, short, short, short, void> glRects;
    public delegate* unmanaged<short*, short*, void> glRectsv;
    public delegate* unmanaged<Enums.Render, int> glRenderMode;
    public delegate* unmanaged<double, double, double, double, void> glRotated;
    public delegate* unmanaged<float, float, float, float, void> glRotatef;
    public delegate* unmanaged<double, double, double, void> glScaled;
    public delegate* unmanaged<float, float, float, void> glScalef;
    public delegate* unmanaged<int, int, int, int, void> glScissor;
    public delegate* unmanaged<int, uint*, void> glSelectBuffer;
    public delegate* unmanaged<Enums.Fill, void> glShadeModel;
    public delegate* unmanaged<Enums.Func, int, uint, void> glStencilFunc;
    public delegate* unmanaged<uint, void> glStencilMask;
    public delegate* unmanaged<Enums.Fail, Enums.Fail, Enums.Fail, void> glStencilOp;
    public delegate* unmanaged<double, void> glTexCoord1d;
    public delegate* unmanaged<double*, void> glTexCoord1dv;
    public delegate* unmanaged<float, void> glTexCoord1f;
    public delegate* unmanaged<float*, void> glTexCoord1fv;
    public delegate* unmanaged<int, void> glTexCoord1i;
    public delegate* unmanaged<int*, void> glTexCoord1iv;
    public delegate* unmanaged<short, void> glTexCoord1s;
    public delegate* unmanaged<short*, void> glTexCoord1sv;
    public delegate* unmanaged<double, double, void> glTexCoord2d;
    public delegate* unmanaged<double*, void> glTexCoord2dv;
    public delegate* unmanaged<float, float, void> glTexCoord2f;
    public delegate* unmanaged<float*, void> glTexCoord2fv;
    public delegate* unmanaged<int, int, void> glTexCoord2i;
    public delegate* unmanaged<int*, void> glTexCoord2iv;
    public delegate* unmanaged<short, short, void> glTexCoord2s;
    public delegate* unmanaged<short*, void> glTexCoord2sv;
    public delegate* unmanaged<double, double, double, void> glTexCoord3d;
    public delegate* unmanaged<double*, void> glTexCoord3dv;
    public delegate* unmanaged<float, float, float, void> glTexCoord3f;
    public delegate* unmanaged<float*, void> glTexCoord3fv;
    public delegate* unmanaged<int, int, int, void> glTexCoord3i;
    public delegate* unmanaged<int*, void> glTexCoord3iv;
    public delegate* unmanaged<short, short, short, void> glTexCoord3s;
    public delegate* unmanaged<short*, void> glTexCoord3sv;
    public delegate* unmanaged<double, double, double, double, void> glTexCoord4d;
    public delegate* unmanaged<double*, void> glTexCoord4dv;
    public delegate* unmanaged<float, float, float, float, void> glTexCoord4f;
    public delegate* unmanaged<float*, void> glTexCoord4fv;
    public delegate* unmanaged<int, int, int, int, void> glTexCoord4i;
    public delegate* unmanaged<int*, void> glTexCoord4iv;
    public delegate* unmanaged<short, short, short, short, void> glTexCoord4s;
    public delegate* unmanaged<short*, void> glTexCoord4sv;
    public delegate* unmanaged<int, Enums.TexType, int, void*, void> glTexCoordPointer;
    public delegate* unmanaged<int, Enums.TexEnvN, float, void> glTexEnvf;
    public delegate* unmanaged<int, Enums.TexEnvN, float*, void> glTexEnvfv;
    public delegate* unmanaged<int, Enums.TexEnvN, int, void> glTexEnvi;
    public delegate* unmanaged<int, Enums.TexEnvN, int*, void> glTexEnviv;
    public delegate* unmanaged<Enums.Coords, Enums.TexGen, double, void> glTexGend;
    public delegate* unmanaged<Enums.Coords, Enums.TexGen, double*, void> glTexGendv;
    public delegate* unmanaged<Enums.Coords, Enums.TexGen, float, void> glTexGenf;
    public delegate* unmanaged<Enums.Coords, Enums.TexGen, float*, void> glTexGenfv;
    public delegate* unmanaged<Enums.Coords, Enums.TexGen, int, void> glTexGeni;
    public delegate* unmanaged<Enums.Coords, Enums.TexGen, int*, void> glTexGeniv;
    public delegate* unmanaged<int, int, int, int, int, Enums.ImageFormat, Enums.ImageType, void*, void> glTexImage1D;
    public delegate* unmanaged<int, int, int, int, int, int, Enums.ImageFormat, Enums.ImageType, void*, void> glTexImage2D;
    public delegate* unmanaged<Enums.TexTarget, Enums.TexNV2, float, void> glTexParameterf;
    public delegate* unmanaged<Enums.TexTarget, Enums.TexNV2, float*, void> glTexParameterfv;
    public delegate* unmanaged<Enums.TexTarget, Enums.TexNV2, int, void> glTexParameteri;
    public delegate* unmanaged<Enums.TexTarget, Enums.TexNV2, int*, void> glTexParameteriv;
    public delegate* unmanaged<int, int, int, int, Enums.ImageFormat, Enums.ImageType, void*, void> glTexSubImage1D;
    public delegate* unmanaged<int, int, int, int, int, int, Enums.ImageFormat, Enums.ImageType, void*, void> glTexSubImage2D;
    public delegate* unmanaged<double, double, double, void> glTranslated;
    public delegate* unmanaged<float, float, float, void> glTranslatef;
    public delegate* unmanaged<double, double, void> glVertex2d;
    public delegate* unmanaged<double*, void> glVertex2dv;
    public delegate* unmanaged<float, float, void> glVertex2f;
    public delegate* unmanaged<float*, void> glVertex2fv;
    public delegate* unmanaged<int, int, void> glVertex2i;
    public delegate* unmanaged<int*, void> glVertex2iv;
    public delegate* unmanaged<short, short, void> glVertex2s;
    public delegate* unmanaged<short*, void> glVertex2sv;
    public delegate* unmanaged<double, double, double, void> glVertex3d;
    public delegate* unmanaged<double*, void> glVertex3dv;
    public delegate* unmanaged<float, float, float, void> glVertex3f;
    public delegate* unmanaged<float*, void> glVertex3fv;
    public delegate* unmanaged<int, int, int, void> glVertex3i;
    public delegate* unmanaged<int*, void> glVertex3iv;
    public delegate* unmanaged<short, short, short, void> glVertex3s;
    public delegate* unmanaged<short*, void> glVertex3sv;
    public delegate* unmanaged<double, double, double, double, void> glVertex4d;
    public delegate* unmanaged<double*, void> glVertex4dv;
    public delegate* unmanaged<float, float, float, float, void> glVertex4f;
    public delegate* unmanaged<float*, void> glVertex4fv;
    public delegate* unmanaged<int, int, int, int, void> glVertex4i;
    public delegate* unmanaged<int*, void> glVertex4iv;
    public delegate* unmanaged<short, short, short, short, void> glVertex4s;
    public delegate* unmanaged<short*, void> glVertex4sv;
    public delegate* unmanaged<int, Enums.TexType, int, void*, void> glVertexPointer;
    public delegate* unmanaged<int, int, int, int, void> glViewport;
}